{"version":3,"sources":["webpack:///./src/pages/photography.js"],"names":["_","require","StyledSection","styled","section","Picture","Heading","key","value","getUrl","url","replaceAll","name","this","date","fromFirestore","a","list","firebase","firestore","collection","doc","get","then","response","map","data","photos","Object","entries","push","console","log","PhotographyPage","useState","isLoading","setIsLoading","fetching","setFetching","setData","useEffect","auth","signInAnonymously","tmp","currentUser","delete","isEmpty","fetchData","animateNav","isHome","footer","rel","href"],"mappings":"yQAWMA,EAAIC,EAAQ,QAKZC,EAAgBC,IAAOC,QAAV,iFAAGD,CAAH,wCAUbE,GALgBF,YAAOG,KAAV,iFAAGH,CAAH,2CAMjB,SAAYI,EAAKC,GAAQ,IAAD,YAKxBC,OAAS,iBAASC,qFAAcC,YAAW,EAAKC,KAAM,IAAK,OAAzCF,yDAJhBG,KAAKD,KAAOL,EACZM,KAAKC,KAAON,IAMVO,EAAa,uCAAG,4BAAAC,EAAA,6DAChBC,EAAO,GADS,SAGdC,IAASC,YACdC,WAAW,SACXC,IAAI,OACJC,MAAMC,MAAK,SAAAC,GAGR,IAFA,IACMC,EADOD,EAASE,OACLC,OACjB,MAA0BC,OAAOC,QAAQJ,GAAzC,eAA+C,CAAC,IAAD,OAApClB,EAAoC,KAA/BC,EAA+B,KAC7CS,EAAKa,KAAK,IAAIzB,EAAQE,EAAKC,IAC3BuB,QAAQC,IAAIzB,EAAKC,OAXH,gCAebS,GAfa,2CAAH,qDAsEJgB,UApDS,WAAO,IAAD,EAEMC,oBAAS,GAApCC,EAFqB,KAEVC,EAFU,OAGIF,oBAAS,GAAlCG,EAHqB,KAGXC,EAHW,OAIJJ,mBAAS,IAA1BR,EAJqB,KAIfa,EAJe,KAiC5B,OA1BAC,qBAAU,WAAM,4CAEd,4BAAAxB,EAAA,+EAEUE,IAASuB,OAAOC,oBAF1B,cAGIX,QAAQC,IAAI,aAHhB,SAIoBjB,IAJpB,OAIQ4B,EAJR,OAKIJ,EAAQI,GACRP,GAAa,GACblB,IAASuB,OAAOG,YAAYC,SAAStB,MAAK,WACxCQ,QAAQC,IAAI,gCARlB,kDAWID,QAAQC,IAAR,MACAI,GAAa,GAZjB,2DAFc,sBAkBXU,YAAQpB,IAASS,IAAcE,IAChCC,GAAY,GAnBC,WAAD,wBAoBZS,MAGD,CAACZ,EAAWE,EAAUX,IAIvB,kBAAC,IAAD,CAAQsB,YAAY,EAAOC,QAAQ,EAAOC,QAAQ,GAChD,kBAAC,IAAD,KACE,6DACA,0BAAMC,IAAI,YAAYC,KAAK,0CAG7B,kBAAClD,EAAD,MACIiC,IAAcnC,EAAE8C,QAAQpB,KAAU1B,EAAE8C,QAAQpB,IAC5C,kBAAC,IAAD,CAAWA,KAAMA,UAAQ,KAE1BS,GACC,kBAAC,IAAD","file":"component---src-pages-photography-js-5873b55ba59856207746.js","sourcesContent":["import React, { useEffect, useState }  from 'react';\r\nimport firebase from \"gatsby-plugin-firebase\";\r\nimport styled from 'styled-components';\r\nimport { Helmet } from 'react-helmet';\r\nimport { graphql } from 'gatsby';\r\nimport PropTypes from 'prop-types';\r\nimport { isEmpty, replaceAll } from \"@utils\";\r\nimport { Layout } from '@components';\r\nimport { LoadingPage, TilesPage } from '@components/photography';\r\nimport { media, mixins, Heading, Section } from '@styles';\r\n\r\nconst _ = require('lodash');\r\n\r\nconst url = \"https://firebasestorage.googleapis.com/v0/b/portfolio-49b69.appspot.com/o/\";\r\nconst token = \"ea925040-1fca-4eda-b1e8-0eb96567ab7e\";\r\n\r\nconst StyledSection = styled.section`\r\n  margin: auto 0;\r\n  padding: 100px 0 0px;\r\n`;\r\n\r\nconst StyledHeading = styled(Heading)`\r\n  align-self: baseline;\r\n  line-height: 0.75;\r\n`;\r\n\r\nclass Picture {\r\n  constructor(key, value) {\r\n    this.name = key;\r\n    this.date = value;\r\n  }\r\n\r\n  getUrl = () => `${url}photo%2F${replaceAll(this.name, ' ', '%20')}?alt=media&token=${token}`;\r\n}\r\n\r\nconst fromFirestore = async () => {\r\n  var list = [];\r\n\r\n  await firebase.firestore()\r\n  .collection(\"photo\")\r\n  .doc(\"all\")\r\n  .get().then(response => {\r\n      const data = response.data();\r\n      const map = data.photos;\r\n      for(const [key, value] of Object.entries(map)) {\r\n        list.push(new Picture(key, value));\r\n        console.log(key, value);\r\n      }\r\n  });\r\n\r\n  return list;\r\n}\r\n\r\nconst PhotographyPage = () => {\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [fetching, setFetching] = useState(false);\r\n  const [data, setData] = useState({});\r\n\r\n\r\n  useEffect(() => {\r\n\r\n    async function fetchData() {\r\n      try {\r\n        await firebase.auth().signInAnonymously()\r\n        console.log(\"signed in\");\r\n        let tmp = await fromFirestore();\r\n        setData(tmp);\r\n        setIsLoading(false);\r\n        firebase.auth().currentUser.delete().then(() => {\r\n          console.log('anonymous account deleted');\r\n        });\r\n      } catch(e) {\r\n        console.log(e);\r\n        setIsLoading(false);\r\n      }\r\n    }\r\n\r\n    if(isEmpty(data) && isLoading && !fetching) {\r\n      setFetching(true);\r\n      fetchData();\r\n    }\r\n\r\n  }, [isLoading, fetching, data]);\r\n\r\n\r\n  return (\r\n    <Layout animateNav={false} isHome={false} footer={true}>\r\n      <Helmet>\r\n        <title>Photography | Howard Tseng</title>\r\n        <link rel=\"canonical\" href=\"https://howardt12345.com/photography\" />\r\n      </Helmet>\r\n\r\n      <StyledSection>\r\n        {!isLoading && !_.isEmpty(data) && !_.isEmpty(data) && (\r\n          <TilesPage data={data ?? []} />\r\n        )}\r\n        {isLoading && (\r\n          <LoadingPage />\r\n        )}\r\n      </StyledSection>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default PhotographyPage;"],"sourceRoot":""}